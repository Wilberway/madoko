Title         : Vuejs 学习笔记
Author        : Wilberway
Logo          : False

[TITLE]

# 开始使用

```javascript
<script src="https://unpkg.com/vue/dist/vue.js"></script>
``` 

一个最简单的例子：

```html
<div id="app">
  {{ message }}
</div>

```
```javascript
var app = new Vue({
  el: '#app',
  data: {
    message: 'Hello Vue!'
  }
})
```

# 语法速查表
 

## v-for

> 循环生成DOM。

> ```html
> <div id="app-4">
>   <ol>
>     <li v-for="todo in todos">
>       {{ todo.text }}
>     </li>
>   </ol>
> </div>
> ```
> ```javascript
> var app4 = new Vue({
>   el: '#app-4',
>   data: {
>     todos: [
>       { text: '学习 JavaScript' },
>       { text: '学习 Vue' },
>       { text: '整个牛项目' }
>     ]
>   }
> })
> ```

## v-on 

> 指令绑定一个事件监听器。

> ```html
> <div id="app-5">
>   <p>{{ message }}</p>
>   <button v-on:click="reverseMessage">逆转消息</button>
> </div>
> ```
> ```javascript
> var app5 = new Vue({
>   el: '#app-5',
>   data: {
>     message: 'Hello Vue.js!'
>   },
>   methods: {
>     reverseMessage: function () {
>       this.message = this.message.split('').reverse().join('')
>     }
>   }
> })
> ```

## v-model

> 实现表单输入和应用状态之间的双向绑定。

> ```html
> <div id="app-6">
>   <p>{{ message }}</p>
>   <input v-model="message">
> </div>
> ```

> ```javascript
> var app6 = new Vue({
>   el: '#app-6',
>   data: {
>     message: 'Hello Vue!'
>   }
> })
> ```

## v-html

> 输出html。

> ```html
>   <div v-html="rawHtml"></div>
> ```

## v-bind

> 绑定HTML的属性，如果条件被求值为 false 的话该属性会被移除。

> ```html
>   <button v-bind:disabled="someDynamicCondition">Button</button>
> ```

## v-bind缩写

> ```html
> <!-- 完整语法 -->
> <a v-bind:href="url"></a>
> <!-- 缩写 -->
> <a :href="url"></a>
> ```

## v-on缩写

> ```html
> <!-- 完整语法 -->
> <a v-on:click="doSomething"></a>
> <!-- 缩写 -->
> <a @click="doSomething"></a>
> ```

## v-if

> 判断是否渲染。

> ```html
> <div id="app-3">
>   <p v-if="seen">现在你看到我了</p>
> </div>
> ```

> ```javascript
> var app3 = new Vue({
>   el: '#app-3',
>   data: {
>    seen: true
>   }
})
> ```

## v-else

> v-else 元素必须紧跟在 v-if 或者 v-else-if 元素的后面——否则它将不会被识别。

> ```html
> <h1 v-if="ok">Yes</h1>
> <h1 v-else>No</h1>
> ```

## v-else-if

> 充当 v-if 的“else-if 块”。可以链式地使用多次。

> ```html
> <div v-if="type === 'A'"> A </div>
> <div v-else-if="type === 'B'"> B </div>
> <div v-else-if="type === 'C'"> C </div>
> <div v-else> Not A/B/C </div>
> ```

## v-show

> 带有 v-show 的元素始终会被渲染并保留在 DOM 中。v-show 是简单地切换元素的 CSS 属性 display。

> ```html
> <h1 v-show="ok">Hello!</h1>
> ```

## key

> 管理可复用的元素。

> ```html
> <template v-if="loginType === 'username'">
>   <label>Username</label>
>   <input placeholder="Enter your username" key="username-input">
> </template>
> <template v-else>
>   <label>Email</label>
>   <input placeholder="Enter your email address" key="email-input">
> </template>
> ```


